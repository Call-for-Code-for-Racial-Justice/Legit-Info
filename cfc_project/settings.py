"""
Django settings for call for code (cfc) project.

Generated by 'django-admin startproject' using Django 2.1.15.
Updated to Django 3.0.8

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/

"""
import datetime as DT
import os
import sys
from socket import gethostname, gethostbyname 

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

MEDIA_URL = '/results/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'results')
SOURCE_ROOT = os.path.join(BASE_DIR, 'sources')

APP_NAME = 'Legit-Info'

# Legiscan.com only allows 30,000 requests per 30-day period.
#
# Legislation will be fetched from Legiscan.com and either stored in
# local file system or Cloud Object Storage (bucket=legi-info)
#
# Specify FOB_METHOD='FILE' to use local or shared file system.
#    Requires the following environment variables appropriate for
#    your operating system:
#
#       FOB_STORAGE = 'full/path/that/you/want/to/store/your/files'
#
# Specify FOB_METHOD='OBJECT' to use Cloud Object Storage
#    Requires the following environment variables for COS credentials:
#
#       COS_ENDPOINT_URL = <https://endpoint.url>
#       COS_API_KEY_ID = <COS api-key-id>
#       COS_INSTANCE = <crn:v1:bluemix:public:etc:etc:etc>
#
FOB_METHOD = os.getenv('FOB_METHOD', 'FILE')

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!

SECRET_KEY = os.getenv(
    'SECRET_KEY', 'ry()%j23$u$c7q$m2o0vo1w(u^eut8b3c0ylpy+)((6f7j08a4')

# SECURITY WARNING: don't run with debug turned on in production!
# Specify environment variable CFC_DEBUG='False' for Production
DEBUG = False
LOGLEVEL = os.getenv('CFC_LOGLEVEL_PROD', 'ERROR')
if os.getenv('CFC_DEBUG', 'True') == 'True':
    DEBUG = True
    LOGLEVEL = os.getenv('CFC_LOGLEVEL_DEV', 'DEBUG')

LOGHANDLE = ['console', 'log_file']                      # Issue 71
LOGGING = {
    'version': 1,
    # Version of logging
    'disable_existing_loggers': False,

    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },

    'formatters': {
        'django.server': {
            '()': 'django.utils.log.ServerFormatter',
            'format': '[{server_time}] {message}',
            'style': '{',
        },
        'full': {
            'format': '{asctime} {module}:{funcName} [{levelname}] {message}',
            'datefmt': '%m-%d %H:%M:%S',                 # 24-hour clock UTC
            'style': '{',
        },
    },

    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'full'
        },
        'django.server': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'django.server',
        },
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'log_file': {
            'level': 'DEBUG',
            'class': 'logging.handlers.RotatingFileHandler',
            'maxBytes': 1024 * 1024 * 100,  # 100 MB
            'backupCount': 7,
            'filename': './logs/cfc_app.log',
            'formatter': 'full'
        },

    },
    'loggers': {
        '': {
            'level': 'WARNING',
            'handlers': ['console', 'log_file'],
        },
        'django.request': {
            'handlers': ['console', 'log_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.security': {
            'handlers': ['console', 'log_file'],
            'level': 'ERROR',
            'propagate': False,
        },
        'django.server': {
            'handlers': ['django.server', 'log_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'py.warnings': {
            'handlers': ['console', 'log_file'],
        },
        'cfc_app': {
            'handlers': LOGHANDLE,                            # Issue 71
            'level': LOGLEVEL,
            'propagate': False,
        },
        'cfc_app.management.commands': {
            'level': 'DEBUG',
            'handlers': LOGHANDLE,                            # Issue 71
            'propagate': False,
        },
        'users': {
            'handlers': LOGHANDLE,                            # Issue 71
            'level': LOGLEVEL,
            'propagate': False,
        },

    },

}

ALLOWED_CIDR_NETS = ['10.0.0.0/8']

ALLOWED_HOSTS = [ gethostname(), gethostbyname(gethostname()),
                '.mybluemix.net', '.codeengine.appdomain.cloud', '.apps-crc.testing', '0.0.0.0', '127.0.0.1', 'localhost']

# Application definition

INSTALLED_APPS = [
    # Default django apps
    'whitenoise.runserver_nostatic',
    'django.contrib.admin',
    'django.contrib.auth',

    # My apps
    'users',
    'cfc_app',


    # Third party apps.
    'bootstrap4',
    'django_extensions',
    'django_q',

    # Other django apps
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    
    'django.contrib.staticfiles',
    'django.contrib.admindocs',

]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'allow_cidr.middleware.AllowCIDRMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.contrib.admindocs.middleware.XViewMiddleware',
]

ROOT_URLCONF = 'cfc_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


# The email host settings are optional, needed for the "email to self"
# Feature.  The project team used 'Mailtrap.IO' for testing.

EMAIL_HOST = os.getenv('EMAIL_HOST', '')
EMAIL_HOST_USER = os.getenv('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.getenv('EMAIL_HOST_PASSWORD', '')
EMAIL_PORT = os.getenv('EMAIL_PORT', '')

WSGI_APPLICATION = 'cfc_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

# SQLite3 is used in Stage 1 for local test and development
# Postgresql is used in Stage 2 and Stage 3.  See /docs for details

use_SQLite3 = os.getenv('USE_SQLITE3', 'True')
CFC_SHOWDB = os.getenv('CFC_SHOWDB', 'True')
if use_SQLite3 == 'True':
    if CFC_SHOWDB == 'True':
        print('**Using SQLite3**')
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
else:
    if CFC_SHOWDB == 'True':
        print('**Using PostgreSQL**')
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('POSTGRESQL_DATABASE', 'cfcappdb'),
            'USER': os.environ.get('POSTGRESQL_USER', 'NOT_SET'),
            'PASSWORD': os.environ.get('POSTGRESQL_PASSWORD', 'NOT_SET'),
            'HOST': os.environ.get('POSTGRESQL_HOSTNAME', 'localhost'),
            'PORT': os.environ.get('POSTGRESQL_PORT', '5432'),
            'CHARSET': 'utf8'
        }
    }


# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME':
        ('django.contrib.auth.password_validation'
         '.UserAttributeSimilarityValidator'),
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME':
        'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/


STATIC_URL = '/static/'
STATICFILES_DIRS = [ os.path.join(BASE_DIR, 'static'), ]

STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Simplified static file serving.
# https://warehouse.python.org/project/whitenoise/

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'
#STATICFILES_STORAGE = 'whitenoise.storage.CompressedStaticFilesStorage'
#STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.StaticFilesStorage'

# My settings
LOGIN_URL = 'users:login'
LONG_AGO = DT.date(1911, 6, 16)  # Long ago in history

LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/' # new

# Configure your Q cluster
# More details https://django-q.readthedocs.io/en/latest/configure.html
Q_CLUSTER = {
    "name": "cfc_app",
    "workers": 4,      # Up to 4 cores on laptop to run background tasks
    "timeout": 3600,   # Allow up to 1 hour per task
    "max_attempts": 3,  # Try up to 3 times
    "retry": 21600,    # Retry every six hours
    "orm": "default",  # Use Django's ORM + database for broker
}
# End of module
